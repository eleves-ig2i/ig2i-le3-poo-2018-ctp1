package vuecontrole;

import java.sql.SQLException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import metier.RequeteGestionStock;
import modele.*;

/**
 * Fenêtre d'accueil.
 * 
 * La fenêtre d'accueil, qui liste les produits et permet l'ajout rapide d'un
 * mouvement à la base de données.
 * 
 * @author jessy
 */
public class Accueil extends javax.swing.JFrame {
    private RequeteGestionStock requete = null;
    
    /**
     * Constructeur par défaut.
     * 
     * Récupère la requête et peuple la liste des produits.
     * 
     * @throws SQLException Exception de base de données.
     * @throws ClassNotFoundException Driver JDBC non trouvé.
     */
    public Accueil() throws SQLException, ClassNotFoundException {
        // On récupère la liste des produits.
        requete = RequeteGestionStock.getInstance();
        
        // On laisse Swing initialiser les composants.
        initComponents();
        
        // Puis on remplit la liste des produits.
        updateProductList();
        
        // On ajoute un ListSelectionListener pour pouvoir réagir à la
        // sélection d'un produit dans la JList.
        productList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                updateSpinner();
            }
        });
    }
    
    /**
     * Met à jour la liste des produits affichée pour prendre en compte la
     * valeur du champ de texte.
     */
    private void updateProductList(){
        // On récupère la saisie
        String search = searchField.getText();
        
        try {
            List<Produit> produits = null;
            
            // Si la saisie est vide, on montre tout, sinon on filtre.
            if( search.isEmpty() )
                produits = requete.ensProduits();
            else
                produits = requete.ensProduits(search);
            
            // On ajoute chaque produit au modèle.
            DefaultListModel model = new DefaultListModel();
            
            for(Produit curr: produits){
                // Pour pouvoir afficher les quantités en stock, on doit
                // récupérer tous les mouvements avant d'afficher.
                requete.addAllMouvementsToProduit(curr);
                model.addElement(curr);
            }
            
            // Puis on associe le tout à la liste.
            productList.setModel(model);
        } catch(SQLException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Met à jour le modèle du JSpinner pour fixer sa valeur initiale et ses
     * limites. Appelée à chaque changement de sélection.
     */
    private void updateSpinner(){
        Produit produit = productList.getSelectedValue();
        
        // Pas de sélection -> on ne peut pas ajouter de mouvement
        if( produit == null ){
            quantitySpinner.setEnabled(false);
            addButton.setEnabled(false);
            return;
        } else {
            quantitySpinner.setEnabled(true);
            addButton.setEnabled(true);
        }
        
        // Si on a une sélection, on change le modèle du spinner.
        SpinnerNumberModel model = new SpinnerNumberModel();
        model.setMinimum(-produit.getQuantiteEnStock());
        model.setMaximum(Integer.MAX_VALUE);
        model.setValue(produit.getQuantiteEnStock());
        quantitySpinner.setModel(model);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        previewButton = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        productList = new javax.swing.JList<>();
        quantitySpinner = new javax.swing.JSpinner();
        addButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Accueil");

        jLabel1.setText("Recherche : ");

        previewButton.setText("Voir Prévisions");
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });

        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFieldKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(productList);

        quantitySpinner.setEnabled(false);

        addButton.setText("Ajouter Mouvement");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchField))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(previewButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(quantitySpinner)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(previewButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyReleased
        updateProductList();
    }//GEN-LAST:event_searchFieldKeyReleased

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // On récupère la sélection et la valeur du spinner.
        Produit produit = productList.getSelectedValue();
        int quantity = (Integer) quantitySpinner.getValue();
        int stock = produit.getQuantiteEnStock();
        
        // Dans tous les cas, on remet le spinner à 0.
        quantitySpinner.setValue(0);
        
        // Normalement si rien n'est sélectionné, le bouton est désactivé donc
        // il ne peut déjà rien se passer. Mais comme le sujet le demande
        // explicitement, on vérifie quand même :)
        if( produit == null )
            return;
        
        // Si la quantité dans le spinner est nulle, un message est affiché
        // et aucun enregistrement n'est effectué.
        if( quantity == 0 ){
            JOptionPane.showMessageDialog(this, "Une quantité nulle a été entrée", "AVERTISSEMENT", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Si on va dépasser le stock minimal, avertissement
        if( (quantity < 0) && (stock + quantity < produit.getStockMin()) )
            JOptionPane.showMessageDialog(this, "N'oubliez pas de passer une commande de " + produit.getNom(), "AVERTISSEMENT", JOptionPane.WARNING_MESSAGE);
        
        // Si on va dépasser le stock maximal, confirmation
        if( (quantity > 0) && (stock + quantity > produit.getStockMax()) ){
            if( JOptionPane.showConfirmDialog(this, "Vous allez dépasser le stock maximal, continuer?", "AVERTISSEMENT", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION )
                return;
        }
        
        // Enregistrement en base & mise à jour du modèle.
        try {
            if( requete.ajouteMouvement(produit, quantity) ){
                // Pas vraiment optimal, mais c'est plus simple comme ça :/
                updateProductList();
            }
        } catch( SQLException e ){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void previewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewButtonActionPerformed
        try {
            // On affiche simplement la fenêtre Prevision.
            Prevision.getInstance().setVisible(true);
        } catch(SQLException|ClassNotFoundException ex){
            Logger.getLogger(Accueil.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_previewButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // On choisit le thème.
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        // Puis on crée et lance l'accueil.
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Accueil().setVisible(true);
                } catch (SQLException|ClassNotFoundException ex) {
                    Logger.getLogger(Accueil.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton previewButton;
    private javax.swing.JList<Produit> productList;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
